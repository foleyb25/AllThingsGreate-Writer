<div id="app" v-cloak style="padding: 24px">
    <div class="container-fluid pt-5 pb-5">
            <h1 v-if="blog.isReviewed">Blog Approved</h1>
        <h1>Author: {{blog.writer.fullName}}</h1>
        <H1>{{blog.title}}</H1>
        <div id="preview">
            <%- blog.bodyHTML %>
        </div>

        <div v-if="!blog.isReviewed">
            <button style="background-color: teal;" v-on:click="approve">Approve</button>
        </div>
    </div>
    <!-- COMMENTS -->
    <div class="comment-section">
        <div style="margin-bottom: 12px">
            Comments ({{blog.comments.length}})
        </div>
        <div v-for="c in blog.comments"
        style="background-color: white; padding: 16px; margin-bottom: 16px">
            <div style="display: flex">
                <img class="center-cropped" id="center-cropped":src="!c.user.profileImageUrl ? '/images/startup.png' : c.user.profileImageUrl">
                <div style="margin-left: 16px; justify-content: center">
                    <div style="font-weight: bold">
                        {{c.user.username}}
                    </div>
                    <div>
                        Posted {{c.fromNow}}
                    </div>
                </div>
                
            </div>
            <div class="c-text">
                {{c.text}}
            </div>
            <button class="btn btn-danger" v-on:click="deletecomment(c.id)">Delete</button>
        </div>
    </div>
</div>

<%- exposeLocalsToBrowser({keys: ['blog']}) %>

<script>
    const App = new Vue({
        el: '#app',
        data: {
            blog: window.SAILS_LOCALS.blog,
            shouldShowDeleteConfirmation: false,
            selectedBlotToDelete: null,
            isDeletingBlog: false,
        },
        methods: {
            approve: async function() {
                const formData = new FormData()
                formData.append('blogId', this.blog.id)
                try {
                    await axios.put('/blog/approve', formData)
                    location.reload()
                } catch (err) {
                    console.error(err.toString())
                }
            },
            
            deletecomment: async function(commentid) {
                const formData = new FormData()
                formData.append('commentid', commentid)
                try {
                    await axios.delete('/comment/delete/'+commentid)
                    location.reload()
                } catch(err) {
                    console.error(err.toString())
                }
                
            }

        },
        computed: {
        }
    })
</script>

<style>
.center-cropped {
    object-position: center; /* Center the image within the element */
    object-fit: cover;
    width: 64px;
    height: 64px;
    border-radius: 100px;
    border: solid 1px rgb(94, 94, 94);
}
</style>
